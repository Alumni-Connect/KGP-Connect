// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


 
model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?    @unique
  password           String?
  emailVerified      DateTime? @map("email_verified")
  image              String?
  role               Role      @default(STUDENT)
  posts              Post[]
  comments           Comment[]
  postVotes          PostVote[]
  commentVotes       CommentVote[]
  donationsMade      Donation[] @relation("DonorDonations")
  donationsReceived  Donation[] @relation("RecipientDonations")
  
  @@map("users")
}

model VerificationToken {
//   token String
//   email String
//   createdAt DateTime @default(now())

// @@unique([email,token])
  id String  @id @default(cuid())
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")

}

model Donation {
  id          String   @id @default(cuid())
  amount      Float
  currency    String   @default("INR")
  donor       User     @relation("DonorDonations", fields: [donorId], references: [id])
  donorId     String
  recipient   User     @relation("RecipientDonations", fields: [recipientId], references: [id])
  recipientId String
  createdAt   DateTime @default(now())
  message     String?
  status      String   @default("pending")
}

enum Role {
  STUDENT
  ALUM
  ADMIN
}

model Post {
  id           String    @id @default(cuid())
  title        String
  content      String
  subreddit    String
  type         String    @default("text")
  authorId     String
  author       User      @relation(fields: [authorId], references: [id])
  score        Int       @default(0)
  commentCount Int       @default(0)
  status       String    @default("active")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  comments     Comment[]
  PostVote     PostVote[]
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  postId    String
  post      Post      @relation(fields: [postId], references: [id])
  parentId  String?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  path      String[]
  depth     Int       @default(0)
  authorId  String
  author    User      @relation(fields: [authorId], references: [id])
  score     Int       @default(0)
  status    String    @default("active")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  CommentVote CommentVote[]
}

model PostVote {
  id       String   @id @default(cuid())
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  postId   String
  post     Post     @relation(fields: [postId], references: [id])
  value    Int
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model CommentVote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id])
  value     Int
  createdAt DateTime @default(now())

  @@unique([userId, commentId])
}

