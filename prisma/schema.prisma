generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["strictUndefinedChecks"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(cuid())
  name                String?
  hall                String?
  rollNumber          String?
  email               String?        @unique
  password            String?
  emailVerified       DateTime?      @map("email_verified")
  image               String?
  role                Role           @default(STUDENT)
  hasRegistered       Boolean        @default(false)
  comments            Comment[]
  commentVotes        CommentVote[]
  donationsMade       Donation[]     @relation("DonorDonations")
  donationsReceived   Donation[]     @relation("RecipientDonations")
  posts               Post[]
  postVotes           PostVote[]
  createdScholarships Scholarships[] @relation("ScholarshipsCreation")
  appliedScholarships ScholarshipForm[] @relation("ScholarshipsApplied")

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model OtpVerification {
  id         String   @id @default(cuid())
  identifier String
  otp        String
  expires    DateTime

  @@map("verification_Otp")
}

model Donation {
  id          String   @id @default(cuid())
  amount      Float
  currency    String   @default("INR")
  donorId     String
  recipientId String
  createdAt   DateTime @default(now())
  message     String?
  status      String   @default("pending")
  donor       User     @relation("DonorDonations", fields: [donorId], references: [id])
  recipient   User     @relation("RecipientDonations", fields: [recipientId], references: [id])
}

model Post {
  id           String     @id @default(cuid())
  title        String
  content      String
  subreddit    String
  type         String     @default("text")
  authorId     String
  score        Int        @default(0)
  commentCount Int        @default(0)
  status       String     @default("active")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  comments     Comment[]
  author       User       @relation(fields: [authorId], references: [id])
  PostVote     PostVote[]
}

model Comment {
  id          String        @id @default(cuid())
  content     String
  postId      String
  parentId    String?
  path        String[]
  depth       Int           @default(0)
  authorId    String
  score       Int           @default(0)
  status      String        @default("active")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  author      User          @relation(fields: [authorId], references: [id])
  parent      Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[]     @relation("CommentReplies")
  post        Post          @relation(fields: [postId], references: [id])
  CommentVote CommentVote[]
}

model PostVote {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  value     Int
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
}

model CommentVote {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  value     Int
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, commentId])
}

model Job {
  id       String   @id @default(cuid())
  title    String
  company  String
  location String
  salary   String
  postedAt DateTime @default(now())
  category String
}

// scholarship questions 

model Scholarships {
  id          String   @id @default(cuid())
  title       String
  description String
  criteria    String[]
  createdAt   DateTime @default(now())
  lastDate    DateTime
  createdBy   String
  create      User     @relation("ScholarshipsCreation", fields: [createdBy], references: [id])
  formQuestions   FormQuestion[]
  ScholarshipForms ScholarshipForm[]
}


model FormQuestion {
  id              String @id @default(cuid())
  description     String
  type            SchFormQuestion
  ScholarshipForm Scholarships @relation(fields: [scholarShipId],references:[id],onDelete: Cascade)
  scholarShipId   String
  QuestionResponses FormResponses[]
}

model ScholarshipForm {
  id    String @id @default(cuid())
  name  String 
  email String
  hall  String
  rollNumber       String
  curriculumVitae  String
  Department       String
  YearOfGraduation DateTime
  AppliedAt        DateTime
  formResponses    FormResponses[]   
  Scholarship      Scholarships @relation(fields: [ScholarshipId], references: [id], onDelete: Cascade)
  ScholarshipId    String
  applicants  User   @relation("ScholarshipsApplied", fields:[studentId],references: [id])
  studentId   String
}

model FormResponses {
  id  String @id @default(cuid())
  answer String
  linkedToFormQuestion FormQuestion @relation(fields: [linkedFormId], references: [id])
  linkedToSchlarshipForm ScholarshipForm @relation(fields: [scholarshipFormId], references: [id])
  scholarshipFormId    String
  linkedFormId  String
}

enum SchFormQuestion {
RADIO
MULTIPLERADIO
BOOLEAN
TEXT
}

// scholarship section end

enum Role {
  STUDENT
  ALUM
  ADMIN
}
